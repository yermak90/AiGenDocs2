from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from .states import RegStates
from .keyboards import home_kb, confirm_inline_kb

router = Router(name="tg")

@router.message(F.text.in_({"/start", "üè† –î–æ–º–æ–π"}))
async def cmd_start(m: Message, state: FSMContext):
    await state.clear()
    await m.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=home_kb())

@router.message(F.text == "üßæ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è / –ü—Ä–æ—Ñ–∏–ª—å")
async def reg_entry(m: Message, state: FSMContext):
    await state.set_state(RegStates.upload_id)
    await m.answer("–®–∞–≥ 1: –∑–∞–≥—Ä—É–∑–∏—Ç–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ (—Ñ–æ—Ç–æ/PDF).", reply_markup=home_kb())

@router.message(RegStates.upload_id, F.document | F.photo)
async def reg_ocr(m: Message, state: FSMContext):
    # TODO: —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª, OCR ‚Üí –§–ò–û/–ò–ò–ù/—Å—Ä–æ–∫–∏
    await m.answer("–†–∞—Å–ø–æ–∑–Ω–∞–ª –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ.", reply_markup=None)
    await m.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º?", reply_markup=confirm_inline_kb())

@router.callback_query(F.data.startswith("confirm:"))
async def confirm(cb: CallbackQuery, state: FSMContext):
    action = cb.data.split(":")[1]
    if action == "ok":
        await state.set_state(RegStates.phone)
        await cb.message.answer("–®–∞–≥ 2: –í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –ë–ï–ó +7 –∏ 8 (10 —Ü–∏—Ñ—Ä).")
    elif action == "retry":
        await state.set_state(RegStates.upload_id)
        await cb.message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –µ—â—ë —Ä–∞–∑.")
    else:
        await state.clear()
        await cb.message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=home_kb())
    await cb.answer()

@router.message(RegStates.phone, F.text.regexp(r"^\d{10}$"))
async def reg_phone_ok(m: Message, state: FSMContext):
    # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å phone
    await state.set_state(RegStates.moderation)
    await m.answer("–®–∞–≥ 3: –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∑–∞—è–≤–∫–∏. –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –≤ Telegram –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.")

# –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –º–µ–Ω—é ¬´üìù –°–æ–∑–¥–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä¬ª
@router.message(F.text == "üìù –°–æ–∑–¥–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä")
async def create_contract(m: Message):
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏ –¥–ª—è OCR.")
